class Solution {
public:
    vector<int> addToArrayForm(vector<int>& num, int k) {
          int carry=k;
          int i=num.size();
        vector<int> ans;
          while(--i>=0 || carry>0){
              if(i>=0)
               carry=num[i]+carry;
              ans.push_back(carry%10);
              carry=carry/10;
          }
        
        reverse(ans.begin(),ans.end());
        //   if(carry){
        //       vector<int> nums;int c=0;
        //       while(carry){
        //           num.push_back(carry%10);
        //           nums.push_back(carry%10);c++;
        //           carry/=10;
        //       }
        //       int j=0;
        // for(int i=num.size()-1;(i-c)>=0;i--){
        //     num[i]=num[i-c];
        //     num[i-c]=nums[c-(i-c)];
        //     j++;
        // }
        // }
        return ans;
        
     //12300001
    // 10000123
    // 
//        vector<int> ans;
//        long long int n=0;
//         long long int x=1;
//         long long int zero=0;
//        for(long long int i=num.size()-1;i>=0;i--){
//            if(num[i]==0)zero++;
//            else if(num[i]!=0 && (zero==0||zero==1 ||(zero && !n))){
//                n+=(long long)x*num[i]; zero=0;}
//            else if(num[i]!=0 && zero){
//            n+=(long long)x*num[i];zero=0; 
//            }
//            x*=10;
//        }
//         cout<<n<<" ";
//        n+=(long long int)k;
//         int d=10;
//        while(n){
//            ans.push_back((int)(n%d));
//            n/=10;
//        }
//         for(int i=0;i<ans.size()/2;i++){
//             int p=ans[i];
//             ans[i]=ans[ans.size()-i-1];
//             ans[ans.size()-i-1]=p;
//         }
        
//         return ans;
    }
};
